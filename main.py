# -*- coding: utf-8 -*-
"""Hackathon-Harsha-final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Nn6Os33-JEecG-n9NSF316HbSy1K3KV

**Subscriber Prediction Talent Search Hackathon**

**Task**: is to find the most accurate prediction of whether a person to be called will subscribe to the term deposit plan or not using any of the machine learning algorithms.

This is machine learning model is writen by **Harsha D B** (harshabasavaraju7@gmail.com)
"""

# Commented out IPython magic to ensure Python compatibility.
#libraries for the project
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
from google.colab import files
uploaded_test = files.upload()
uploaded_train = files.upload()

#reading the csv files
train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train.columns

test.columns

train.info()

test.info()

train.shape

test.shape

train.head()

test.head()

train.isnull().sum()
#checking for missing values in train dataset

"""**NO-missing values found in train**"""

test.isnull().sum()
#checking for missing values in test dataset

"""**NO-missing values found in test**"""

train['y_bool'].value_counts()

sns.countplot(data=train, x='y_bool')

train['y_bool'].value_counts(normalize=True)

#analysing the Job variable
train['job'].value_counts()

sns.set_context('paper')
train['job'].value_counts().plot(kind='bar', figsize=(10,6));
# this is the Job frequency table

#analysing of marital status
train['marital'].value_counts()

sns.countplot(data=train, x='marital');

sns.countplot(data=train, x='marital', hue='y_bool');

sns.distplot(train['age']);

# Bivariate analysis
print(pd.crosstab(train['job'],train['y_bool']))

"""TRAINING"""

job = pd.crosstab(train['job'],train['y_bool'])
job_norm = job.div(job.sum(1).astype(float), axis=0)

job_norm.plot.bar(stacked=True,figsize=(8,6));

pd.crosstab(train['marital'], train['y_bool'])

marital = pd.crosstab(train['marital'], train['y_bool'])
marital_norm = marital.div(marital.sum(1).astype(float), axis=0)
marital_norm

marital_norm.plot.bar(stacked=True, figsize=(10,6));

#default vs y_bool
pd.crosstab(train['default'], train['y_bool'])

dflt = pd.crosstab(train['default'], train['y_bool'])
dflt_norm = dflt.div(dflt.sum(1).astype(float), axis=0)
dflt_norm

dflt_norm.plot.bar(stacked=True, figsize=(6,6))

train['y_bool']

tc = train.corr()
tc

fig,ax= plt.subplots()
fig.set_size_inches(20,10)
sns.heatmap(tc, annot=True, cmap='YlGnBu')

"""**Model Building**"""

target = train['y_bool']
train = train.drop('y_bool', axis=1)

train = pd.get_dummies(train)
train.head()

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(train, target, test_size=0.2, random_state=12)

from sklearn.linear_model import LogisticRegression

lreg = LogisticRegression()
lreg.fit(X_train,y_train)

pred = lreg.predict(X_val)

from sklearn.metrics import *

accuracy_score(y_val,pred)

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier(max_depth=4, random_state=0)

clf.fit(X_train, y_train)

predict = clf.predict(X_val)
predict

accuracy_score(y_val,predict)

test = pd.get_dummies(test)
test.head()

test_pred = clf.predict(test)
test_pred

submissions = pd.DataFrame()
submissions['y_bool'] = test_pred

submissions['y_bool']

submissions.to_csv('submission-file-Harsha.csv', header=True, index=False)
import io
df = pd.read_csv('submission-file-Harsha.csv')
df

"""**Download** the predicted file in **CSV**"""

files.download('submission-file-Harsha.csv')